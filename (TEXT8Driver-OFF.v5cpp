{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ndigital_out intakeA = digital_out(Brain.ThreeWirePort.A);\ndigital_out WingsB = digital_out(Brain.ThreeWirePort.B);\ncontroller Controller1 = controller(primary);\n\nmotor RightMotorC = motor(PORT12, ratio6_1, false);\n\nmotor RightMotorD = motor(PORT13, ratio6_1, true);\n\nmotor LeftMotorC = motor(PORT18, ratio6_1, false);\n\nmotor LeftMotorD = motor(PORT19, ratio6_1, true);\nmotor leftMotorA = motor(PORT17, ratio6_1, false);\nmotor leftMotorB = motor(PORT20, ratio6_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB, LeftMotorC, LeftMotorD);\nmotor rightMotorA = motor(PORT11, ratio6_1, true);\nmotor rightMotorB = motor(PORT14, ratio6_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB, RightMotorC, RightMotorD);\ninertial DrivetrainInertial = inertial(PORT1);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainInertial, 219.44, 320, 40, mm, 1);\n\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  DrivetrainInertial.calibrate();\n  while (DrivetrainInertial.isCalibrating()) {\n    wait(75, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // stop the motors if the brain is calibrating\n      if (DrivetrainInertial.isCalibrating()) {\n        LeftDriveSmart.stop();\n        RightDriveSmart.stop();\n        while (DrivetrainInertial.isCalibrating()) {\n          wait(25, msec);\n        }\n      }\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3\n      // right = Axis2\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position();\n      int drivetrainRightSideSpeed = Controller1.Axis2.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nint Brain_precision = 0, Console_precision = 0, Controller1_precision = 0;\n\nfloat Intake, wings, timerr, ActualHeading, TargetHeading, error, MotorSpeed;\n\n// Left P Loop \nvoid turnLeftDegrees(double targetDegrees) {\n  // Proportional gain (adjust as needed)\n  double kP = 0.55;//55\n\n  // Dead zone for the controller (adjust as needed)\n  int deadzone = 2;\n\n  // Calculate target heading\n  double targetHeading = Drivetrain.heading() - targetDegrees;\n\n  // Ensure targetHeading is within the range [0, 360)\n  if (targetHeading < 0) {\n    targetHeading += 360.0;\n  } else if (targetHeading >= 360.0) {\n    targetHeading -= 360.0;\n  }\n\n  // Turn left until the target heading is reached\n  while (true) {\n    // Calculate error\n    double error = targetHeading - Drivetrain.heading();\n    \n    // Ensure error is within the range [-180, 180)\n    if (error < -180.0) {\n      error += 360.0;\n    } else if (error >= 180.0) {\n      error -= 360.0;\n    }\n\n    // Apply dead zone\n    if (fabs(error) < deadzone) {\n      error = 0.0;\n    }\n    \n    // Calculate motor speed based on error\n    double motorSpeed = error * kP;\n\n    // Decrease motor speed as error decreases\n    motorSpeed *= fabs(error / targetDegrees);\n\n    // Set the motor speeds for left turn\n    LeftDriveSmart.setVelocity(motorSpeed, percent);\n    RightDriveSmart.setVelocity(-motorSpeed, percent); // Reverse the direction\n\n    // Spin the motors for left turn\n    LeftDriveSmart.spin(forward);\n    RightDriveSmart.spin(forward);\n\n    // Break the loop if the target heading is reached\n    if (fabs(error) < 2.0) {\n      break;\n    }\n    \n    // Wait for a short duration\n    wait(5, msec);\n  }\n\n  // Stop the drivetrain\n  Drivetrain.stop();\n}\n\n//Right P loop\nvoid turnRightDegrees(double targetDegrees) {\n  // Proportional gain (adjust as needed)\n  double kP = 0.55;//55\n\n  // Dead zone for the controller (adjust as needed)\n  int deadzone = 2;\n\n  // Calculate target heading\n  double targetHeading = Drivetrain.heading() + targetDegrees;\n\n  // Ensure targetHeading is within the range [0, 360)\n  if (targetHeading < 0) {\n    targetHeading += 360.0;\n  } else if (targetHeading >= 360.0) {\n    targetHeading -= 360.0;\n  }\n\n  // Turn right until the target heading is reached\n  while (true) {\n    // Calculate error\n    double error = targetHeading - Drivetrain.heading();\n    \n    // Ensure error is within the range [-180, 180)\n    if (error < -180.0) {\n      error += 360.0;\n    } else if (error >= 180.0) {\n      error -= 360.0;\n    }\n\n    // Apply dead zone\n    if (fabs(error) < deadzone) {\n      error = 0.0;\n    }\n    \n    // Calculate motor speed based on error\n    double motorSpeed = error * kP;\n\n    // Decrease motor speed as error decreases\n    motorSpeed *= fabs(error / targetDegrees);\n\n    // Set the motor speeds for right turn\n    LeftDriveSmart.setVelocity(motorSpeed, percent);\n    RightDriveSmart.setVelocity(-motorSpeed, percent); // Reverse the direction\n\n    // Spin the motors for right turn\n    LeftDriveSmart.spin(forward);\n    RightDriveSmart.spin(forward);\n\n    // Break the loop if the target heading is reached\n    if (fabs(error) < 2.0) {\n      break;\n    }\n    \n    // Wait for a short duration\n    wait(5, msec);\n  }\n\n  // Stop the drivetrain\n  Drivetrain.stop();\n}\n\n\nevent Load = event();\nevent STOP = event();\nevent Intake_Arms = event();\nevent message1 = event();\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_0() {\n  timerr = 15.0;\n  wait(30.0, seconds);\n  Controller1.rumble(\"....\");\n  wait(30.0, seconds);\n  Controller1.rumble(\"----\");\n  wait(30.0, seconds);\n  Controller1.rumble(\"-.-.\");\n  repeat(15) {\n    Brain.Screen.print(\"Seconds left:\");\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(timerr));\n    wait(1.0, seconds);\n    timerr = timerr + -1.0;\n    Brain.Screen.clearScreen();\n    Brain.Screen.setCursor(1, 1);\n    wait(5, msec);\n  }\n  return 0;\n}\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_1() {\n  //\n  return 0;\n}\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  Drivetrain.setStopping(brake);\n  turnRightDegrees(90.0);\n  turnLeftDegrees(90.0);\n  turnRightDegrees(180.0);\n  wait(90.0, seconds);\n\n  Drivetrain.setDriveVelocity(150, percent);\n  Drivetrain.setTurnVelocity(50.0, percent);\n\n  Drivetrain.turnFor(right, 60.0, degrees);\n\n  wait(0.01, seconds);\n  Drivetrain.driveFor(forward, 28.0, inches);\n  intakeA.set(true);\n  Drivetrain.drive(forward);\n  wait(0.3, seconds);\n  Drivetrain.stop();\n  wait(0.01, seconds);\n  Drivetrain.driveFor(reverse, 25.0, inches);\n  Drivetrain.setDriveVelocity(40.0, percent);\n  Drivetrain.driveFor(reverse, 15.0, inches);\n  Drivetrain.setDriveVelocity(150.0, percent);\n  Drivetrain.driveFor(forward, 35.0, inches);\n\n  return 0;\n}\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_4() {\n  // Sets variables for both the wings and intake pistons:\n  Drivetrain.setStopping(brake);\n  wings = 1.0;\n  Intake = 1.0;\n  while (true) {\n    if ((Controller1.ButtonX.pressing() || Controller1.ButtonY.pressing()) && Intake == 1.0) {\n      // Intake Arms\n      // If X is pressed and Intake = 1 is puts the intake out :\n      intakeA.set(true);\n      wait(0.01, seconds);\n      // Sets the Intake to 2 so it knows that it was just pressed:\n      Intake = 2.0;\n      // Waits 0.5 seconds to make sure we don't double press the button:\n      wait(0.5, seconds);\n    } else if ((Controller1.ButtonX.pressing() || Controller1.ButtonY.pressing()) && Intake == 2.0) {\n      // If X pressed and intake = 2 than we retract the intake:\n      intakeA.set(false);\n      wait(0.01, seconds);\n      // Sets Intake to 1 so we can put them out again:\n      Intake = 1.0;\n      // Waits 1 second so it cant misfire or be double pressed:\n      wait(1.0, seconds);\n    } else if ((Controller1.ButtonUp.pressing() || Controller1.ButtonRight.pressing()) && wings == 1.0) {\n      // Wing Arms\n      // Same concept as the Intake but just for wings:\n      // If both of the above statements aren't met it comes down to here to check if the up arrow has been pressed:\n      // If pressed it sets the wings out so be can ram more Tri-balls:\n      WingsB.set(true);\n      wait(0.01, seconds);\n      // Sets Wings to 2 so it can keep track if the button has been pressed once before:\n      wings = 2.0;\n      // Waits 0.5 seconds to make sure there is no double pressing:\n      wait(0.5, seconds);\n    } else {\n      if ((Controller1.ButtonUp.pressing() || Controller1.ButtonRight.pressing()) && wings == 2.0) {\n        // If the up arrow has been pressed and wings are = too 2, it will retract the wings:\n        WingsB.set(false);\n        wait(0.01, seconds);\n        // Set wings to 1 so it knows the wings are retracted:\n        wings = 1.0;\n        // Waits 1 second to make sure there is no misfires or double pressing:\n        wait(1.0, seconds);\n      }\n    }\n  wait(5, msec);\n  }\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n  vex::task drive0(ondriver_drivercontrol_0);\nvex::task drive1(ondriver_drivercontrol_1);\nvex::task drive4(ondriver_drivercontrol_4);\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  drive0.stop();\ndrive1.stop();\ndrive4.stop();\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n}","textLanguage":"cpp","rconfig":[{"port":[1],"name":"intakeA","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"WingsB","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22},{"port":[17,20,11,14,1],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel275in","gear":"ratio6_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[12],"name":"RightMotorC","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[13],"name":"RightMotorD","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[18],"name":"LeftMotorC","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[19],"name":"LeftMotorD","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.5","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}