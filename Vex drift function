//By Gllitchh

// Function to drift the robot over a set distance to a set heading
void driftToHeading(double distance, double targetHeading) {
    // Constants for tuning drift behavior
    double maxSpeed = 200; // Maximum motor speed
    double minSpeed = 50;  // Minimum motor speed to maintain control
    double turnFactor = 0.5; // Factor to adjust turn speed relative to forward speed
    
    // Calculate initial heading
    double initialHeading = Inertial.rotation(degrees);
    
    // Calculate heading error
    double headingError = targetHeading - initialHeading;
    
    // Determine direction of drift (left or right)
    int driftDirection = (headingError > 0) ? 1 : -1;
    
    // Calculate arc radius (for simplicity, assuming constant radius)
    double arcRadius = distance / (2 * sin(headingError * (M_PI / 360)));
    
    // Calculate speed for outer wheels to maintain arc
    double outerSpeed = maxSpeed * (arcRadius + 10) / (arcRadius + 5); // Adding a buffer to prevent slipping
    
    // Set initial motor speeds for drifting
    SmartMotorLeft.setVelocity(maxSpeed * driftDirection, percent);
    SmartMotorRight.setVelocity(outerSpeed * driftDirection, percent);
    
    // Start motors
    SmartMotorLeft.spin(forward);
    SmartMotorRight.spin(forward);
    
    // Monitor heading during drift and adjust speeds to maintain arc
    while (fabs(headingError) > 1) { // Adjust tolerance as needed
        // Update heading error
        initialHeading = Inertial.rotation(degrees);
        headingError = targetHeading - initialHeading;
        
        // Adjust speeds to maintain arc
        SmartMotorLeft.setVelocity((maxSpeed - (turnFactor * headingError)) * driftDirection, percent);
        
        // Ensure minimum speed to maintain control
        double rightSpeed = (SmartMotorRight.velocity(percent) > minSpeed) ? SmartMotorRight.velocity(percent) : minSpeed;
        double leftSpeed = (SmartMotorLeft.velocity(percent) > minSpeed) ? SmartMotorLeft.velocity(percent) : minSpeed;
        
        // Update motor speeds
        SmartMotorRight.setVelocity(rightSpeed, percent);
        SmartMotorLeft.setVelocity(leftSpeed, percent);
        
        // Sleep for a short duration before next iteration
        this_thread::sleep_for(20);
    }
    
    // Stop motors at the end of drift
    SmartMotorLeft.stop();
    SmartMotorRight.stop();
}
